import 'reflect-metadata';
import { UserService } from "./services/data/UserService";
import { TweetService } from "./services/data/TweetService";
import { AccountService } from "./services/auth/AccountService";
import { IAuthCookie } from './types/Authentication';
/**
 * The instance for fetching data from Twitter.
 *
 * @public
 *
 * @param cookie The cookie to use to fetch data.
 *
 * @returns The API for fetching user and tweet data.
 *
 * @remarks The cookie can be obtained by using {@link AccountService.login} method.
 * To use the {@link AccountService.login} method, create a {@link Rettiwt} instance without passing any cookie .
 * Then use the {@link AccountService.login} method of {@link AccountService} to get the cookie.
 */
export declare const Rettiwt: (cookie?: IAuthCookie | undefined) => {
    users: UserService;
    tweets: TweetService;
    account: AccountService;
};
export * from './services/auth/AuthService';
export * from './services/auth/AccountService';
export * from './services/data/TweetService';
export * from './services/data/UserService';
export * from './services/util/CacheService';
export * from './services/util/FetcherService';
export { ITweetFilter } from 'rettiwt-core';
export * from './types/Args';
export { IAuthCookie } from './types/Authentication';
export * from './types/Rettiwt';
export * from './types/Service';
export * from './types/Tweet';
export * from './types/User';
export { IDataValidationError } from 'rettiwt-core';
export { TweetFilter } from 'rettiwt-core';
export * from './models/args/TweetListArgs';
export * from './models/args/UserListArgs';
export { AuthCookie } from './models/auth/AuthCookie';
export * from './models/data/CursoredData';
export * from './models/data/Tweet';
export * from './models/data/User';
export { DataValidationError } from 'rettiwt-core';
