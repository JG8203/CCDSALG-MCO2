"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.Tweet = exports.TweetEntities = void 0;
// PARSERS
var Parsers = __importStar(require("../../services/helper/Parser"));
/**
 * The different types parsed entities like urls, media, mentions, hashtags, etc.
 *
 * @internal
 */
var TweetEntities = /** @class */ (function () {
    // MEMBER METHODS
    function TweetEntities(entities) {
        // MEMBER DATA
        /** The list of hashtags mentioned in the tweet. */
        this.hashtags = [];
        /** The list of urls mentioned in the tweet. */
        this.urls = [];
        /** The list of IDs of users mentioned in the tweet. */
        this.mentionedUsers = [];
        /** The list of urls to various media mentioned in the tweet. */
        this.media = [];
        // Extracting user mentions
        if (entities.user_mentions) {
            for (var _i = 0, _a = entities.user_mentions; _i < _a.length; _i++) {
                var user = _a[_i];
                this.mentionedUsers.push(user.id_str);
            }
        }
        // Extracting urls
        if (entities.urls) {
            for (var _b = 0, _c = entities.urls; _b < _c.length; _b++) {
                var url = _c[_b];
                this.urls.push(url.expanded_url);
            }
        }
        // Extracting hashtags
        if (entities.hashtags) {
            for (var _d = 0, _e = entities.hashtags; _d < _e.length; _d++) {
                var hashtag = _e[_d];
                this.hashtags.push(hashtag.text);
            }
        }
        // Extracting media urls (if any)
        if (entities.media) {
            for (var _f = 0, _g = entities.media; _f < _g.length; _f++) {
                var media = _g[_f];
                this.media.push(media.media_url_https);
            }
        }
    }
    return TweetEntities;
}());
exports.TweetEntities = TweetEntities;
/**
 * The details of a single Tweet.
 *
 * @internal
 */
var Tweet = /** @class */ (function () {
    /**
     * @param tweet The raw tweet data.
     */
    function Tweet(tweet) {
        this.id = tweet.rest_id;
        this.createdAt = tweet.legacy.created_at;
        this.tweetBy = tweet.legacy.user_id_str;
        this.entities = new TweetEntities(tweet.legacy.entities);
        this.quoted = tweet.legacy.quoted_status_id_str;
        this.fullText = Parsers.normalizeText(tweet.legacy.full_text);
        this.replyTo = tweet.legacy.in_reply_to_status_id_str;
        this.lang = tweet.legacy.lang;
        this.quoteCount = tweet.legacy.quote_count;
        this.replyCount = tweet.legacy.reply_count;
        this.retweetCount = tweet.legacy.retweet_count;
        this.likeCount = tweet.legacy.favorite_count;
    }
    return Tweet;
}());
exports.Tweet = Tweet;
//# sourceMappingURL=Tweet.js.map