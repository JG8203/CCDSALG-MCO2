"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.rootQuery = void 0;
// PACKAGE
var graphql_1 = require("graphql");
// TYPES
var UserTypes_1 = require("../types/UserTypes");
var TweetTypes_1 = require("../types/TweetTypes");
// RESOLVERS
var UserResolver_1 = __importDefault(require("../resolvers/UserResolver"));
var TweetResolver_1 = __importDefault(require("../resolvers/TweetResolver"));
var AccountResolver_1 = __importDefault(require("../resolvers/AccountResolver"));
exports.rootQuery = new graphql_1.GraphQLObjectType({
    name: 'Root',
    fields: {
        test: {
            type: graphql_1.GraphQLString,
            resolve: function () { return "GraphQL Works!"; }
        },
        User: {
            type: UserTypes_1.User,
            description: "Returns the details of the twitter user with given user name",
            args: {
                id: { type: graphql_1.GraphQLString }
            },
            resolve: function (parent, args, context) { return new UserResolver_1["default"](context).resolveUserDetails(args.id); }
        },
        Tweet: {
            type: TweetTypes_1.Tweet,
            description: "Returns a single tweet given it's id",
            args: {
                id: { type: graphql_1.GraphQLString }
            },
            resolve: function (parent, args, context) { return new TweetResolver_1["default"](context).resolveTweet(args.id); }
        },
        Tweets: {
            type: TweetTypes_1.TweetList,
            description: "Returns the list of tweets matching the given criteria",
            args: {
                fromUsers: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) },
                toUsers: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) },
                mentions: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) },
                hashtags: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) },
                words: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) },
                startDate: { type: graphql_1.GraphQLString },
                endDate: { type: graphql_1.GraphQLString },
                sinceId: { type: graphql_1.GraphQLString },
                quoted: { type: graphql_1.GraphQLString },
                links: { type: graphql_1.GraphQLBoolean, defaultValue: false },
                count: { type: graphql_1.GraphQLInt, defaultValue: 10 },
                cursor: { type: graphql_1.GraphQLString, defaultValue: '' }
            },
            resolve: function (parent, args, context) {
                // Converting string dates to Date objects
                args.startDate = args.startDate ? new Date(args.startDate) : undefined;
                args.endDate = args.endDate ? new Date(args.endDate) : undefined;
                return new TweetResolver_1["default"](context).resolveTweets(args, args.count, args.cursor);
            }
        },
        Login: {
            type: new graphql_1.GraphQLObjectType({
                name: 'AuthCookie',
                fields: {
                    auth_token: { type: graphql_1.GraphQLString },
                    ct0: { type: graphql_1.GraphQLString },
                    kdt: { type: graphql_1.GraphQLString },
                    twid: { type: graphql_1.GraphQLString }
                }
            }),
            description: "Returns the cookies that can be used to fetch data from twitter",
            args: {
                email: { type: graphql_1.GraphQLString },
                userName: { type: graphql_1.GraphQLString },
                password: { type: graphql_1.GraphQLString }
            },
            resolve: function (parent, args, context) { return new AccountResolver_1["default"](context).resolveLogin(args.email, args.userName, args.password); }
        }
    }
});
//# sourceMappingURL=RootQuery.js.map