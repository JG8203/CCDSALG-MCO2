"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.TweetList = exports.Tweet = exports.TweetTokens = void 0;
// PACKAGE
var graphql_1 = require("graphql");
// TYPES
var UserTypes_1 = require("./UserTypes");
var Global_1 = require("./Global");
// RESOLVERS
var TweetResolver_1 = __importDefault(require("../resolvers/TweetResolver"));
var UserResolver_1 = __importDefault(require("../resolvers/UserResolver"));
exports.TweetTokens = new graphql_1.GraphQLObjectType({
    name: 'TweetTokens',
    description: 'Additional extracted tokens from the tweet like mentions, hashtags, etc',
    fields: function () { return ({
        hashtags: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) },
        urls: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) },
        mentionedUsers: {
            type: UserTypes_1.UserList,
            resolve: function (parent, args, context) { return parent.mentionedUsers.map(function (user) { return new UserResolver_1["default"](context).resolveUserDetails(user); }); }
        },
        media: { type: new graphql_1.GraphQLList(graphql_1.GraphQLString) }
    }); }
});
exports.Tweet = new graphql_1.GraphQLObjectType({
    name: 'Tweet',
    description: 'The details of single tweet',
    fields: function () { return ({
        id: { type: graphql_1.GraphQLString },
        tweetBy: {
            type: UserTypes_1.User,
            resolve: function (parent, args, context) { return new UserResolver_1["default"](context).resolveUserDetails(parent.tweetBy); }
        },
        createdAt: { type: graphql_1.GraphQLString },
        entities: { type: exports.TweetTokens },
        quoted: {
            type: exports.Tweet,
            resolve: function (parent, args, context) { return parent.quoted ? new TweetResolver_1["default"](context).resolveTweet(parent.quoted) : undefined; }
        },
        fullText: { type: graphql_1.GraphQLString },
        replyTo: {
            type: exports.Tweet,
            resolve: function (parent, args, context) { return parent.replyTo ? new TweetResolver_1["default"](context).resolveTweet(parent.replyTo) : undefined; }
        },
        lang: { type: graphql_1.GraphQLString },
        quoteCount: { type: graphql_1.GraphQLInt },
        quotes: {
            type: exports.TweetList,
            args: {
                count: {
                    type: graphql_1.GraphQLInt,
                    description: "The number of quotes to fetch, must be >= 1",
                    defaultValue: 10
                },
                all: {
                    type: graphql_1.GraphQLBoolean,
                    description: "Whether to fetch all quotes",
                    defaultValue: false
                },
                cursor: {
                    type: graphql_1.GraphQLString,
                    description: 'The cursor to the batch of quotes list to fetch',
                    defaultValue: ''
                }
            },
            resolve: function (parent, args, context) { return new TweetResolver_1["default"](context).resolveTweetQuotes(parent.id, args.count, args.all, args.cursor, parent.quoteCount); }
        },
        likeCount: { type: graphql_1.GraphQLInt },
        likers: {
            type: UserTypes_1.UserList,
            args: {
                count: {
                    type: graphql_1.GraphQLInt,
                    description: "The number of likers to fetch, must be >= 10 (when no cursor if provided)",
                    defaultValue: 10
                },
                all: {
                    type: graphql_1.GraphQLBoolean,
                    description: "Whether to fetch all likers",
                    defaultValue: false
                },
                cursor: {
                    type: graphql_1.GraphQLString,
                    description: 'The cursor to the batch of likers list to fetch',
                    defaultValue: ''
                }
            },
            resolve: function (parent, args, context) { return new TweetResolver_1["default"](context).resolveTweetLikers(parent.id, args.count, args.all, args.cursor, parent.likeCount); }
        },
        retweetCount: { type: graphql_1.GraphQLInt },
        retweeters: {
            type: UserTypes_1.UserList,
            args: {
                count: {
                    type: graphql_1.GraphQLInt,
                    description: "The number of retweeters to fetch, must be >= 10 (when no cursor if provided)",
                    defaultValue: 10
                },
                all: {
                    type: graphql_1.GraphQLBoolean,
                    description: "Whether to fetch all likers",
                    defaultValue: false
                },
                cursor: {
                    type: graphql_1.GraphQLString,
                    description: 'The cursor to the batch of retweeters list to fetch',
                    defaultValue: ''
                }
            },
            resolve: function (parent, args, context) { return new TweetResolver_1["default"](context).resolveTweetRetweeters(parent.id, args.count, args.all, args.cursor, parent.retweetCount); }
        },
        replyCount: { type: graphql_1.GraphQLInt }
        /**
         * THIS IS DISABLED FOR USE FOR NOW BECAUSE TWITTER DOESN'T HAVE ANY ENDPOINT FOR FETCHING REPLIES.
         * THE DATA THIS RETURNS IS INCONSISTENT!
         */
        /*
        replies: {
            type: TweetList,
            args: {
                count: {
                    type: GraphQLInt,
                    description: "The number of replies to fetch",
                    defaultValue: 10
                },
                all: {
                    type: GraphQLBoolean,
                    description: "Whether to fetch all replies",
                    defaultValue: false
                },
                cursor: {
                    type: GraphQLString,
                    description: 'The cursor to the batch of replies list to fetch',
                    defaultValue: ''
                }
            },
            resolve: (parent, args, context) => new TweetResolver(context).resolveTweetReplies(parent.id, args.count, args.all, args.cursor, parent.replyCount)
        }
        */
    }); }
});
exports.TweetList = new graphql_1.GraphQLList(new graphql_1.GraphQLUnionType({
    name: 'TweetCursorUnion',
    description: 'A union type which can either be a Tweet or a Cursor, used in cursored tweet lists',
    types: [exports.Tweet, Global_1.Cursor],
    resolveType: function (data) {
        // If it has fullText field => this is a Tweet object
        if (data.fullText) {
            return exports.Tweet;
        }
        // If it has a value field => this is a cursor object
        else if (data.value) {
            return Global_1.Cursor;
        }
    }
}));
//# sourceMappingURL=TweetTypes.js.map