"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.UserList = exports.User = void 0;
// PACKAGE
var graphql_1 = require("graphql");
// TYPES
var TweetTypes_1 = require("./TweetTypes");
var Global_1 = require("./Global");
// RESOLVERS
var UserResolver_1 = __importDefault(require("../resolvers/UserResolver"));
var TweetResolver_1 = __importDefault(require("../resolvers/TweetResolver"));
exports.User = new graphql_1.GraphQLObjectType({
    name: 'User',
    description: 'The details of a single target twitter user',
    fields: function () { return ({
        id: { type: graphql_1.GraphQLString },
        userName: { type: graphql_1.GraphQLString },
        fullName: { type: graphql_1.GraphQLString },
        createdAt: { type: graphql_1.GraphQLString },
        description: { type: graphql_1.GraphQLString },
        isVerified: { type: graphql_1.GraphQLBoolean },
        location: { type: graphql_1.GraphQLString },
        pinnedTweet: {
            type: TweetTypes_1.Tweet,
            resolve: function (parent, args, context) { return (parent.pinnedTweet) ? new TweetResolver_1["default"](context).resolveTweet(parent.pinnedTweet) : undefined; }
        },
        profileBanner: { type: graphql_1.GraphQLString },
        profileImage: { type: graphql_1.GraphQLString },
        favouritesCount: { type: graphql_1.GraphQLInt },
        likes: {
            type: TweetTypes_1.TweetList,
            args: {
                count: {
                    description: "The number of liked tweets to fetch, must be >= 40 (when no cursor if provided)",
                    type: graphql_1.GraphQLInt,
                    defaultValue: 10
                },
                all: {
                    description: "Whether to fetch all tweets liked by user",
                    type: graphql_1.GraphQLBoolean,
                    defaultValue: false
                },
                cursor: {
                    type: graphql_1.GraphQLString,
                    description: 'The cursor to the batch of likes list to fetch',
                    defaultValue: ''
                }
            },
            resolve: function (parent, args, context) { return new UserResolver_1["default"](context).resolveUserLikes(parent.id, args.count, args.all, args.cursor, parent.favouritesCount); }
        },
        followersCount: { type: graphql_1.GraphQLInt },
        followers: {
            type: exports.UserList,
            args: {
                count: {
                    description: "The number of followers to fetch, must be >= 40 (when no cursor is provided)",
                    type: graphql_1.GraphQLInt,
                    defaultValue: 40
                },
                all: {
                    description: "Whether to fetch all followers list",
                    type: graphql_1.GraphQLBoolean,
                    defaultValue: false
                },
                cursor: {
                    type: graphql_1.GraphQLString,
                    description: 'The cursor to the batch of followers list to fetch',
                    defaultValue: ''
                }
            },
            resolve: function (parent, args, context) { return new UserResolver_1["default"](context).resolveUserFollowers(parent.id, args.count, args.all, args.cursor, parent.followersCount); }
        },
        followingsCount: { type: graphql_1.GraphQLInt },
        following: {
            type: exports.UserList,
            args: {
                count: {
                    type: graphql_1.GraphQLInt,
                    description: "The number of followings to fetch, must be >= 40 (when no cursor is provided)",
                    defaultValue: 40
                },
                all: {
                    description: "Whether to fetch all followings list",
                    type: graphql_1.GraphQLBoolean,
                    defaultValue: false
                },
                cursor: {
                    type: graphql_1.GraphQLString,
                    description: 'The cursor to the batch of followers list to fetch',
                    defaultValue: ''
                }
            },
            resolve: function (parent, args, context) { return new UserResolver_1["default"](context).resolveUserFollowing(parent.id, args.count, args.all, args.cursor, parent.followingsCount); }
        },
        statusesCount: { type: graphql_1.GraphQLInt },
        tweets: {
            type: TweetTypes_1.TweetList,
            args: {
                count: {
                    description: "The number of tweets to fetch, must be >= 1",
                    type: graphql_1.GraphQLInt,
                    defaultValue: 10
                },
                all: {
                    description: "Whether to fetch all tweets made by user",
                    type: graphql_1.GraphQLBoolean,
                    defaultValue: false
                },
                cursor: {
                    type: graphql_1.GraphQLString,
                    description: 'The cursor to the batch of tweets list to fetch',
                    defaultValue: ''
                }
            },
            resolve: function (parent, args, context) { return new UserResolver_1["default"](context).resolveUserTweets(parent.userName, args.count, args.all, args.cursor, parent.statusesCount); }
        }
    }); }
});
exports.UserList = new graphql_1.GraphQLList(new graphql_1.GraphQLUnionType({
    name: 'UserCursorUnion',
    description: 'A union type which can either be a User or a Cursor, used in cursored User lists',
    types: [exports.User, Global_1.Cursor],
    resolveType: function (data) {
        // If it has a userName field => this is a User object
        if (data.userName) {
            return exports.User;
        }
        // If it has a value field => this is a Cursor object
        else if (data.value) {
            return Global_1.Cursor;
        }
    }
}));
//# sourceMappingURL=UserTypes.js.map