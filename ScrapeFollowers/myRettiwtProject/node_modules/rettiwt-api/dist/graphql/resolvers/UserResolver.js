"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
// RESOLVERS
var ResolverBase_1 = __importDefault(require("./ResolverBase"));
var CursoredData_1 = require("../../models/data/CursoredData");
var Errors_1 = require("../enums/Errors");
var UserResolver = /** @class */ (function (_super) {
    __extends(UserResolver, _super);
    // MEMBER METHODS
    function UserResolver(context) {
        var _this = _super.call(this, context) || this;
        _this.batchSize = 40;
        return _this;
    }
    /**
     * @returns The details of the target twitter user
     * @param userName The user name of the target twitter user
     * @param id The id/username of the target twitter user
     */
    UserResolver.prototype.resolveUserDetails = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.users.getUserDetails(id)["catch"](function (error) {
                            throw _this.getGraphQLError(error);
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @returns The list of tweets made by the given user
     * @param userName The username of the user whose tweets are to be fetched
     * @param count The number of tweets to fetch, must be >= 10
     * @param all Whether to fetch list of all tweets made by user
     * @param cursor The cursor to the batch of tweets to fetch
     * @param statusesCount The total number of tweets made by target user
     */
    UserResolver.prototype.resolveUserTweets = function (userName, count, all, cursor, statusesCount) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var likes, next, total, res;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        likes = [];
                        next = new CursoredData_1.Cursor(cursor);
                        total = 0;
                        // If all tweets are to be fetched
                        count = all ? statusesCount : count;
                        // If required count less than batch size, setting batch size to required count
                        this.batchSize = (count < this.batchSize) ? count : this.batchSize;
                        _b.label = 1;
                    case 1:
                        // If this is the last batch, change batch size to number of remaining tweets
                        this.batchSize = ((count - total) < this.batchSize) ? (count - total) : this.batchSize;
                        return [4 /*yield*/, this.context.tweets.getTweets({ fromUsers: [userName] }, this.batchSize, next.value)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 2:
                        res = _b.sent();
                        // If data is available
                        if ((_a = res.list) === null || _a === void 0 ? void 0 : _a.length) {
                            // Adding fetched tweets to list of tweets
                            likes = likes.concat(res.list);
                            // Updating total tweets fetched
                            total = likes.length;
                            // Getting cursor to next batch
                            next = res.next;
                        }
                        // If no more data is available
                        else {
                            return [3 /*break*/, 4];
                        }
                        _b.label = 3;
                    case 3:
                        if (total < count) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        // If no likes found
                        if (!likes.length) {
                            return [2 /*return*/, new Error(Errors_1.DataErrors.NoUserTweetsFound)];
                        }
                        // Adding the cursor to the end of list of data
                        likes.push(next);
                        return [2 /*return*/, likes];
                }
            });
        });
    };
    /**
     * @returns The list of tweets liked by the given user
     * @param id The id of the user whose likes are to be fetched
     * @param count The number of likes to fetch, must be >= 40
     * @param all Whether to fetch list of all tweets liked by user
     * @param cursor The cursor to the batch of likes to fetch
     * @param favouritesCount The total number of tweets liked by target user
     */
    UserResolver.prototype.resolveUserLikes = function (id, count, all, cursor, favouritesCount) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var likes, next, total, res;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        likes = [];
                        next = new CursoredData_1.Cursor(cursor);
                        total = 0;
                        // If all liked tweets are to be fetched
                        count = all ? favouritesCount : count;
                        // If required count less than batch size, setting batch size to required count
                        this.batchSize = (count < this.batchSize) ? count : this.batchSize;
                        _b.label = 1;
                    case 1:
                        // If this is the last batch, change batch size to number of remaining tweets
                        this.batchSize = ((count - total) < this.batchSize) ? (count - total) : this.batchSize;
                        return [4 /*yield*/, this.context.users.getUserLikes(id, this.batchSize, next.value)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 2:
                        res = _b.sent();
                        // If data is available
                        if ((_a = res.list) === null || _a === void 0 ? void 0 : _a.length) {
                            // Adding fetched tweets to list of tweets
                            likes = likes.concat(res.list);
                            // Updating total tweets fetched
                            total = likes.length;
                            // Getting cursor to next batch
                            next = res.next;
                        }
                        // If no more data is available
                        else {
                            return [3 /*break*/, 4];
                        }
                        _b.label = 3;
                    case 3:
                        if (total < count) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        // If no likes found
                        if (!likes.length) {
                            return [2 /*return*/, new Error(Errors_1.DataErrors.NoLikedTweetsFound)];
                        }
                        // Adding the cursor to the end of list of data
                        likes.push(next);
                        return [2 /*return*/, likes];
                }
            });
        });
    };
    /**
     * @returns The list of followers of the given twiiter user
     * @param id The id of the user whose followers are to be fetched
     * @param count The number of followers to fetch, must be >= 40 when no cursor is provided
     * @param all Whether to fetch all followers list
     * @param cursor The cursor to the batch of followers to fetch
     * @param followerCount The total number of followers of the target user
     */
    UserResolver.prototype.resolveUserFollowers = function (id, count, all, cursor, followersCount) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var followers, next, total, res;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        followers = [];
                        next = new CursoredData_1.Cursor(cursor);
                        total = 0;
                        // If all followers are to be fetched
                        count = all ? followersCount : count;
                        // If required count less than batch size, setting batch size to required count
                        this.batchSize = (count < this.batchSize) ? count : this.batchSize;
                        _b.label = 1;
                    case 1:
                        // If this is the last batch, change batch size to number of remaining followers
                        this.batchSize = ((count - total) < this.batchSize) ? (count - total) : this.batchSize;
                        return [4 /*yield*/, this.context.users.getUserFollowers(id, this.batchSize, next.value)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 2:
                        res = _b.sent();
                        // If data is available
                        if ((_a = res.list) === null || _a === void 0 ? void 0 : _a.length) {
                            // Adding fetched followers to list of followers
                            followers = followers.concat(res.list);
                            // Updating total followers fetched
                            total = followers.length;
                            // Getting cursor to next batch
                            next = res.next;
                        }
                        // If no more data is available
                        else {
                            return [3 /*break*/, 4];
                        }
                        _b.label = 3;
                    case 3:
                        if (total < count) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        // If no followers found
                        if (!followers.length) {
                            return [2 /*return*/, new Error(Errors_1.DataErrors.NoFollowsFound)];
                        }
                        // Adding the cursor to the end of list of data
                        followers.push(next);
                        return [2 /*return*/, followers];
                }
            });
        });
    };
    /**
     * @returns The list of following of the given twiiter user
     * @param id The id of the user whose followings are to be fetched
     * @param count The number of following to fetch, should be >= 40 when no cursor is provided
     * @param all Whether to fetch list of all followings
     * @param cursor The cursor to the batch of followings to fetch
     * @param followingsCount The total number of followings of the target user
     */
    UserResolver.prototype.resolveUserFollowing = function (id, count, all, cursor, followingsCount) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var following, next, total, res;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        following = [];
                        next = new CursoredData_1.Cursor(cursor);
                        total = 0;
                        // If all followings are to be fetched
                        count = all ? followingsCount : count;
                        // If required count less than batch size, setting batch size to required count
                        this.batchSize = (count < this.batchSize) ? count : this.batchSize;
                        _b.label = 1;
                    case 1:
                        // If this is the last batch, change batch size to number of remaining following
                        this.batchSize = ((count - total) < this.batchSize) ? (count - total) : this.batchSize;
                        return [4 /*yield*/, this.context.users.getUserFollowing(id, this.batchSize, next.value)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 2:
                        res = _b.sent();
                        // If data is available
                        if ((_a = res.list) === null || _a === void 0 ? void 0 : _a.length) {
                            // Adding fetched following to list of following
                            following = following.concat(res.list);
                            // Updating total following fetched
                            total = following.length;
                            // Getting cursor to next batch
                            next = res.next;
                        }
                        // If no more data is available
                        else {
                            return [3 /*break*/, 4];
                        }
                        _b.label = 3;
                    case 3:
                        if (total < count) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        // If no following found
                        if (!following.length) {
                            return [2 /*return*/, new Error(Errors_1.DataErrors.NoFollowsFound)];
                        }
                        // Adding the cursor to the end of list of data
                        following.push(next);
                        return [2 /*return*/, following];
                }
            });
        });
    };
    return UserResolver;
}(ResolverBase_1["default"]));
exports["default"] = UserResolver;
//# sourceMappingURL=UserResolver.js.map