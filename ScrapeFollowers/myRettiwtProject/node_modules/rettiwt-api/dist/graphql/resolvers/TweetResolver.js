"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
// RESOLVERS
var ResolverBase_1 = __importDefault(require("./ResolverBase"));
var CursoredData_1 = require("../../models/data/CursoredData");
var Errors_1 = require("../enums/Errors");
var TweetResolver = /** @class */ (function (_super) {
    __extends(TweetResolver, _super);
    // MEMBER METHODS
    function TweetResolver(context) {
        var _this = _super.call(this, context) || this;
        _this.batchSize = 100;
        return _this;
    }
    /**
     * @returns The details of the tweet with the given id
     * @param id The id of the tweet which is to be fetched
     */
    TweetResolver.prototype.resolveTweet = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.context.tweets.getTweetDetails(id)["catch"](function (error) {
                            throw _this.getGraphQLError(error);
                        })];
                    case 1:
                        res = _a.sent();
                        // Evaluating response
                        return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * @returns The list of tweets matching the given filter
     * @param filter The filter to be used for fetching matching tweets
     * @param count The number of tweets to fetch, must be >= 20 (when no cursor if provided)
     * @param cursor The cursor to the batch of tweets to fetch
     */
    TweetResolver.prototype.resolveTweets = function (filter, count, cursor) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var tweets, next, total, batchSize, res;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tweets = [];
                        next = new CursoredData_1.Cursor(cursor);
                        total = 0;
                        batchSize = 20;
                        // If required count less than batch size, setting batch size to required count
                        batchSize = (count < batchSize) ? count : batchSize;
                        _b.label = 1;
                    case 1:
                        // If this is the last batch, change batch size to number of remaining tweets
                        batchSize = ((count - total) < batchSize) ? (count - total) : batchSize;
                        return [4 /*yield*/, this.context.tweets.getTweets(filter, batchSize, next.value)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 2:
                        res = _b.sent();
                        // If data is available
                        if ((_a = res.list) === null || _a === void 0 ? void 0 : _a.length) {
                            // Adding fetched tweets to list of tweets
                            tweets = tweets.concat(res.list);
                            // Updating total tweets fetched
                            total = tweets.length;
                            // Getting cursor to next batch
                            next = res.next;
                        }
                        // If no more data is available
                        else {
                            return [3 /*break*/, 4];
                        }
                        _b.label = 3;
                    case 3:
                        if (total < count) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        // If no tweets found
                        if (!tweets.length) {
                            return [2 /*return*/, new Error(Errors_1.DataErrors.NoTweetsFound)];
                        }
                        // Adding the cursor to the end of list of data
                        tweets.push(next);
                        return [2 /*return*/, tweets];
                }
            });
        });
    };
    /**
     * @returns The list of quotes of the given tweet
     * @param id The id of the tweet whose quotes are to be fetched
     * @param count The number of quotes to be fetched, must be >= 20 (when no cursor if provided)
     * @param all Whether to fetch all quotes or not
     * @param cursor The cursor to the batch of tweet quotes to fetch
     * @param quoteCount The total number of quotes of the given tweet
     */
    TweetResolver.prototype.resolveTweetQuotes = function (id, count, all, cursor, quoteCount) {
        return __awaiter(this, void 0, void 0, function () {
            var quotes;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        quotes = [];
                        // If all tweets are to be fetched
                        count = all ? quoteCount : count;
                        return [4 /*yield*/, this.resolveTweets({ quoted: id }, count, cursor)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 1:
                        // Fetching the quotes using resolveTweets method
                        quotes = _a.sent();
                        return [2 /*return*/, quotes];
                }
            });
        });
    };
    /**
     * @returns The list of likers of the given tweet
     * @param id The id of the tweet whose likers are to be fetched
     * @param count The total number of likers to fetch, must be >= 10 (when no cursor is provided)
     * @param all Whether to fetch all the likers of the tweet
     * @param cursor The cursor to the batch of likers to fetch
     * @param likesCount The total number of like of the tweet
     */
    TweetResolver.prototype.resolveTweetLikers = function (id, count, all, cursor, likesCount) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var likers, next, total, res;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        likers = [];
                        next = new CursoredData_1.Cursor(cursor);
                        total = 0;
                        // If all likers are to be fetched
                        count = all ? likesCount : count;
                        // If required count less than batch size, setting batch size to required count
                        this.batchSize = (count < this.batchSize) ? count : this.batchSize;
                        _b.label = 1;
                    case 1:
                        // If this is the last batch, change batch size to number of remaining likers
                        this.batchSize = ((count - total) < this.batchSize) ? (count - total) : this.batchSize;
                        return [4 /*yield*/, this.context.tweets.getTweetLikers(id, this.batchSize, next.value)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 2:
                        res = _b.sent();
                        // If data is available
                        if ((_a = res.list) === null || _a === void 0 ? void 0 : _a.length) {
                            // Adding fetched likers to list of likers
                            likers = likers.concat(res.list);
                            // Updating total likers fetched
                            total = likers.length;
                            // Getting cursor to next batch
                            next = res.next;
                        }
                        // If no more data is available
                        else {
                            return [3 /*break*/, 4];
                        }
                        _b.label = 3;
                    case 3:
                        if (total < count) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        // If no likers found
                        if (!likers.length) {
                            return [2 /*return*/, new Error(Errors_1.DataErrors.NoLikersFound)];
                        }
                        // Adding the cursor to the end of list of data
                        likers.push(next);
                        return [2 /*return*/, likers];
                }
            });
        });
    };
    /**
     * @returns The list of retweeters of the given tweet
     * @param id The id of the tweet whose retweeters are to be fetched
     * @param count The total number of retweeters to fetch, must be >= 10 (when no cursor is provided)
     * @param all Whether to fetch all retweeters
     * @param cursor The cursor to the batch of retweeters to fetch
     * @param retweetsCount The total number of retweets of the
     */
    TweetResolver.prototype.resolveTweetRetweeters = function (id, count, all, cursor, retweetsCount) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var retweeters, next, total, res;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        retweeters = [];
                        next = new CursoredData_1.Cursor(cursor);
                        total = 0;
                        // If all retweeters are to be fetched
                        count = all ? retweetsCount : count;
                        // If required count less than batch size, setting batch size to required count
                        this.batchSize = (count < this.batchSize) ? count : this.batchSize;
                        _b.label = 1;
                    case 1:
                        // If this is the last batch, change batch size to number of remaining retweeters
                        this.batchSize = ((count - total) < this.batchSize) ? (count - total) : this.batchSize;
                        return [4 /*yield*/, this.context.tweets.getTweetRetweeters(id, this.batchSize, next.value)["catch"](function (error) {
                                throw _this.getGraphQLError(error);
                            })];
                    case 2:
                        res = _b.sent();
                        // If data is available
                        if ((_a = res.list) === null || _a === void 0 ? void 0 : _a.length) {
                            // Adding fetched retweeters to list of retweeters
                            retweeters = retweeters.concat(res.list);
                            // Updating total retweeters fetched
                            total = retweeters.length;
                            // Getting cursor to next batch
                            next = res.next;
                        }
                        // If no more data is available
                        else {
                            return [3 /*break*/, 4];
                        }
                        _b.label = 3;
                    case 3:
                        if (total < count) return [3 /*break*/, 1];
                        _b.label = 4;
                    case 4:
                        // If no retweeters found
                        if (!retweeters.length) {
                            return [2 /*return*/, new Error(Errors_1.DataErrors.NoRetweetersFound)];
                        }
                        // Adding the cursor to the end of list of data
                        retweeters.push(next);
                        return [2 /*return*/, retweeters];
                }
            });
        });
    };
    return TweetResolver;
}(ResolverBase_1["default"]));
exports["default"] = TweetResolver;
//# sourceMappingURL=TweetResolver.js.map