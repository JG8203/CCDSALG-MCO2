import { FetcherService } from '../util/FetcherService';
import { AuthService } from '../auth/AuthService';
import { User } from '../../models/data/User';
import { Tweet } from '../../models/data/Tweet';
import { CursoredData } from '../../models/data/CursoredData';
/**
 * Handles fetching of data related to user account
 */
export declare class UserService extends FetcherService {
    /**
     * @param auth The AuthService instance to use for authentication.
     */
    constructor(auth: AuthService);
    /**
     * @param id The id/username of the target user.
     *
     * @returns The details of the given user.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.DataErrors.UserNotFound} error, if no user with the given username was found.
     */
    getUserDetails(id: string): Promise<User>;
    /**
     * @param userId The rest id of the target user.
     * @param count The number of tweets to fetch, must be >= 40 (when no cursor is provided) and <=100.
     * @param cursor The cursor to next batch. If blank, first batch is fetched.
     *
     * @returns The list of tweets nade by the target user.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if invalid count has been provided.
     * @throws {@link Errors.DataErrors.UserNotFound} error, if invalid count has been provided.
     *
     * @deprecated Use [this](https://rishikant181.github.io/Rettiwt-API/classes/TweetService.html#getTweets) method instead. It's better in every possible way!
     */
    getUserTweets(userId: string, count?: number, cursor?: string): Promise<CursoredData<Tweet>>;
    /**
     * @param userId The rest id of the target user.
     * @param count The number of following to fetch, must be >= 40 (when no cursor is provided) and <=100.
     * @param cursor The cursor to next batch. If blank, first batch is fetched.
     *
     * @returns The list of users followed by the target user.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if invalid count has been provided.
     * @throws {@link Errors.DataErrors.UserNotFound} error, if invalid count has been provided.
     */
    getUserFollowing(userId: string, count?: number, cursor?: string): Promise<CursoredData<User>>;
    /**
     * @param userId The rest id of the target user.
     * @param count The number of followers to fetch, must be >= 40 (when no cursor is provided) and <=100.
     * @param cursor The cursor to next batch. If blank, first batch is fetched.
     *
     * @returns The list of users following the target user.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if invalid count has been provided.
     * @throws {@link Errors.DataErrors.UserNotFound} error, if invalid count has been provided.
     */
    getUserFollowers(userId: string, count?: number, cursor?: string): Promise<CursoredData<User>>;
    /**
     * @param userId The rest id of the target user.
     * @param count The number of likes to fetch.
     * @param cursor The cursor to next batch. If blank, first batch is fetched, must be >= 40 (when no cursor is provided) and <=100.
     *
     * @returns The list of tweets liked by the target user.
     *
     * @throws {@link AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     */
    getUserLikes(userId: string, count?: number, cursor?: string): Promise<CursoredData<Tweet>>;
}
