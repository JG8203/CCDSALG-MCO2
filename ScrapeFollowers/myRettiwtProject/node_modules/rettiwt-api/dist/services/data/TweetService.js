"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.TweetService = void 0;
// PACKAGES
var rettiwt_core_1 = require("rettiwt-core");
// SERVICES
var FetcherService_1 = require("../util/FetcherService");
// MODELS
var Tweet_1 = require("../../models/data/Tweet");
var User_1 = require("../../models/data/User");
var TweetListArgs_1 = require("../../models/args/TweetListArgs");
var CursoredData_1 = require("../../models/data/CursoredData");
// ENUMS
var Errors_1 = require("../../enums/Errors");
// EXTRACTORS
var TweetExtractors = __importStar(require("../helper/extractors/Tweets"));
/**
 * Handles fetching of data related to tweets.
 * @public
 */
var TweetService = /** @class */ (function (_super) {
    __extends(TweetService, _super);
    /**
     * @param auth The AuthService instance to use for authentication.
     */
    function TweetService(auth) {
        return _super.call(this, auth) || this;
    }
    /**
     * @param filter The filter be used for searching the tweets.
     * @param count The number of tweets to fetch, must be >= 10 (when no cursor is provided) and <= 20
     * @param cursor The cursor to the next batch of tweets. If blank, first batch is fetched.
     *
     * @returns The list of tweets that match the given filter.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if an invalid count has been provided.
     */
    TweetService.prototype.getTweets = function (query, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var args, url, res, data, tweets;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // If user is not authenticated, abort
                        if (!this.isAuthenticated) {
                            throw new Error(Errors_1.AuthenticationErrors.NotAuthenticated);
                        }
                        args = new TweetListArgs_1.TweetListArgs(count, cursor);
                        url = new rettiwt_core_1.Url(rettiwt_core_1.EResourceType.TWEET_SEARCH, { filter: query, count: args.count, cursor: args.cursor }).toString();
                        return [4 /*yield*/, this.request(url).then(function (res) { return res.data; })];
                    case 1:
                        res = _a.sent();
                        data = TweetExtractors.extractTweets(res);
                        // Caching data
                        this.cacheData(data);
                        tweets = data.required.map(function (item) { return new Tweet_1.Tweet(item); });
                        // Sorting the tweets by date, from recent to oldest
                        tweets.sort(function (a, b) { return new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf(); });
                        return [2 /*return*/, new CursoredData_1.CursoredData(tweets, data.cursor)];
                }
            });
        });
    };
    /**
     * @param id The id of the target tweet.
     *
     * @returns The details of a single tweet with the given tweet id.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.DataErrors.TweetNotFound} error, if no tweet with the given id was found.
     */
    TweetService.prototype.getTweetDetails = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedData, url, res, data, tweet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // If user is not authenticated, abort
                        if (!this.isAuthenticated) {
                            throw new Error(Errors_1.AuthenticationErrors.NotAuthenticated);
                        }
                        return [4 /*yield*/, this.readData(id)];
                    case 1:
                        cachedData = _a.sent();
                        // If data exists in cache
                        if (cachedData) {
                            return [2 /*return*/, cachedData];
                        }
                        url = new rettiwt_core_1.Url(rettiwt_core_1.EResourceType.TWEET_DETAILS, { id: id }).toString();
                        return [4 /*yield*/, this.request(url).then(function (res) { return res.data; })];
                    case 2:
                        res = _a.sent();
                        data = TweetExtractors.extractTweet(res, id);
                        // Caching data
                        this.cacheData(data);
                        tweet = new Tweet_1.Tweet(data.required[0]);
                        return [2 /*return*/, tweet];
                }
            });
        });
    };
    /**
     * @param tweetId The rest id of the target tweet.
     * @param count The batch size of the list, must be >= 10 (when no cursor is provided) and <= 20.
     * @param cursor The cursor to the next batch of users. If blank, first batch is fetched.
     *
     * @returns The list of users who liked the given tweet.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if invalid count is provided.
     * @throws {@link Errors.DataErrors.TweetNotFound} error, if no tweet with the given id was found.
     */
    TweetService.prototype.getTweetLikers = function (tweetId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var args, url, res, data, users;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // If user is not authenticated, abort
                        if (!this.isAuthenticated) {
                            throw new Error(Errors_1.AuthenticationErrors.NotAuthenticated);
                        }
                        args = new TweetListArgs_1.TweetListArgs(count, cursor);
                        url = new rettiwt_core_1.Url(rettiwt_core_1.EResourceType.TWEET_FAVORITERS, { id: tweetId, count: args.count, cursor: args.cursor }).toString();
                        return [4 /*yield*/, this.request(url).then(function (res) { return res.data; })];
                    case 1:
                        res = _a.sent();
                        data = TweetExtractors.extractTweetLikers(res);
                        // Caching data
                        this.cacheData(data);
                        users = data.required.map(function (item) { return new User_1.User(item); });
                        return [2 /*return*/, new CursoredData_1.CursoredData(users, data.cursor)];
                }
            });
        });
    };
    /**
     * @param tweetId The rest id of the target tweet.
     * @param count The batch size of the list, must be >= 10 (when no cursor is provided) and <= 100.
     * @param cursor The cursor to the next batch of users. If blank, first batch is fetched.
     *
     * @returns The list of users who retweeted the given tweet.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if invalid count is provided.
     * @throws {@link Errors.DataErrors.TweetNotFound} error, if no tweet with the given id was found.
     */
    TweetService.prototype.getTweetRetweeters = function (tweetId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var args, url, res, data, users;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // If user is not authenticated, abort
                        if (!this.isAuthenticated) {
                            throw new Error(Errors_1.AuthenticationErrors.NotAuthenticated);
                        }
                        args = new TweetListArgs_1.TweetListArgs(count, cursor);
                        url = new rettiwt_core_1.Url(rettiwt_core_1.EResourceType.TWEET_RETWEETERS, { id: tweetId, count: args.count, cursor: args.cursor }).toString();
                        return [4 /*yield*/, this.request(url).then(function (res) { return res.data; })];
                    case 1:
                        res = _a.sent();
                        data = TweetExtractors.extractTweetRetweeters(res);
                        // Caching data
                        this.cacheData(data);
                        users = data.required.map(function (item) { return new User_1.User(item); });
                        return [2 /*return*/, new CursoredData_1.CursoredData(users, data.cursor)];
                }
            });
        });
    };
    return TweetService;
}(FetcherService_1.FetcherService));
exports.TweetService = TweetService;
//# sourceMappingURL=TweetService.js.map