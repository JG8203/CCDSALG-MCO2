import { TweetFilter } from 'rettiwt-core';
import { FetcherService } from "../util/FetcherService";
import { AuthService } from "../auth/AuthService";
import { Tweet } from "../../models/data/Tweet";
import { User } from "../../models/data/User";
import { CursoredData } from '../../models/data/CursoredData';
/**
 * Handles fetching of data related to tweets.
 * @public
 */
export declare class TweetService extends FetcherService {
    /**
     * @param auth The AuthService instance to use for authentication.
     */
    constructor(auth: AuthService);
    /**
     * @param filter The filter be used for searching the tweets.
     * @param count The number of tweets to fetch, must be >= 10 (when no cursor is provided) and <= 20
     * @param cursor The cursor to the next batch of tweets. If blank, first batch is fetched.
     *
     * @returns The list of tweets that match the given filter.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if an invalid count has been provided.
     */
    getTweets(query: TweetFilter, count?: number, cursor?: string): Promise<CursoredData<Tweet>>;
    /**
     * @param id The id of the target tweet.
     *
     * @returns The details of a single tweet with the given tweet id.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.DataErrors.TweetNotFound} error, if no tweet with the given id was found.
     */
    getTweetDetails(id: string): Promise<Tweet>;
    /**
     * @param tweetId The rest id of the target tweet.
     * @param count The batch size of the list, must be >= 10 (when no cursor is provided) and <= 20.
     * @param cursor The cursor to the next batch of users. If blank, first batch is fetched.
     *
     * @returns The list of users who liked the given tweet.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if invalid count is provided.
     * @throws {@link Errors.DataErrors.TweetNotFound} error, if no tweet with the given id was found.
     */
    getTweetLikers(tweetId: string, count?: number, cursor?: string): Promise<CursoredData<User>>;
    /**
     * @param tweetId The rest id of the target tweet.
     * @param count The batch size of the list, must be >= 10 (when no cursor is provided) and <= 100.
     * @param cursor The cursor to the next batch of users. If blank, first batch is fetched.
     *
     * @returns The list of users who retweeted the given tweet.
     *
     * @throws {@link Errors.AuthenticationErrors.NotAuthenticated} error, if no cookies have been provided.
     * @throws {@link Errors.ValidationErrors.InvalidCount} error, if invalid count is provided.
     * @throws {@link Errors.DataErrors.TweetNotFound} error, if no tweet with the given id was found.
     */
    getTweetRetweeters(tweetId: string, count?: number, cursor?: string): Promise<CursoredData<User>>;
}
