"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.extractUserLikes = exports.extractUserFollow = exports.extractUserDetails = void 0;
var Errors_1 = require("../../../enums/Errors");
// PARSERS
var Parsers = __importStar(require("../Parser"));
/**
 * @returns The raw user account data formatted and sorted into required and additional data
 * @param res The raw response received from Twitter
 */
function extractUserDetails(res) {
    var _a, _b, _c;
    var required = []; // To store the reqruied raw data
    var cursor = ''; // To store the cursor to next batch
    var users = []; // To store additional user data
    var tweets = []; // To store additional tweet data
    // If user not found or account suspended
    if (((_c = (_b = (_a = res.data) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.result) === null || _c === void 0 ? void 0 : _c.__typename) !== 'User') {
        throw new Error(Errors_1.DataErrors.UserNotFound);
    }
    // Destructuring user account data
    required.push(res.data.user.result);
    users.push(res.data.user.result);
    // Returning the data
    return {
        required: required,
        cursor: cursor,
        users: users,
        tweets: tweets
    };
}
exports.extractUserDetails = extractUserDetails;
/**
 * @returns The raw user following/followers data formatted and sorted into required and additional data
 * @param res The raw response received from TwitterAPI
 */
function extractUserFollow(res) {
    var required = []; // To store the reqruied raw data
    var cursor = ''; // To store the cursor to next batch
    var users = []; // To store additional user data
    var tweets = []; // To store additional tweet data
    // If user does not exist
    if (Parsers.isJSONEmpty(res.data.user)) {
        throw new Error(Errors_1.DataErrors.UserNotFound);
    }
    // Extracting the raw list
    res.data.user.result.timeline.timeline.instructions.forEach(function (item) {
        var _a, _b;
        if (item.type === 'TimelineAddEntries') {
            // If no follow found
            if (((_a = item.entries) === null || _a === void 0 ? void 0 : _a.length) == 2) {
                // Returning the data
                return {
                    required: required,
                    cursor: cursor,
                    users: users,
                    tweets: tweets
                };
            }
            // Destructuring data
            (_b = item.entries) === null || _b === void 0 ? void 0 : _b.forEach(function (entry) {
                var _a, _b;
                // If entry is of type user and user account exists
                if (entry.entryId.indexOf('user') != -1 && ((_a = entry.content.itemContent) === null || _a === void 0 ? void 0 : _a.user_results.result.__typename) === 'User') {
                    required.push(entry.content.itemContent.user_results.result);
                    users.push(entry.content.itemContent.user_results.result);
                }
                // If entry is of type cursor
                else if (entry.entryId.indexOf('cursor-bottom') != -1) {
                    cursor = (_b = entry.content.value) !== null && _b !== void 0 ? _b : '';
                }
            });
        }
    });
    // Returning the data
    return {
        required: required,
        cursor: cursor,
        users: users,
        tweets: tweets
    };
}
exports.extractUserFollow = extractUserFollow;
/**
 * @returns The raw user likes data formatted and sorted into required and additional data
 * @param res The raw response received from TwitterAPI
 */
function extractUserLikes(res) {
    var required = []; // To store the reqruied raw data
    var cursor = ''; // To store the cursor to next batch
    var users = []; // To store additional user data
    var tweets = []; // To store additional tweet data
    // If user does not exist
    if (Parsers.isJSONEmpty(res.data.user)) {
        throw new Error(Errors_1.DataErrors.UserNotFound);
    }
    // If user likes found
    if (res.data.user.result.timeline_v2.timeline.instructions.length) {
        // Extracting the raw list
        res.data.user.result.timeline_v2.timeline.instructions.forEach(function (item) {
            if (item.type === 'TimelineAddEntries') {
                // Destructuring data
                item.entries.forEach(function (entry) {
                    var _a, _b;
                    // If entry is of type tweet and tweet exists
                    if (entry.entryId.indexOf('tweet') != -1 && ((_a = entry.content.itemContent) === null || _a === void 0 ? void 0 : _a.tweet_results.result.__typename) === 'Tweet') {
                        required.push(entry.content.itemContent.tweet_results.result);
                        users.push(entry.content.itemContent.tweet_results.result.core.user_results.result);
                        tweets.push(entry.content.itemContent.tweet_results.result);
                    }
                    // If entry is of type cursor
                    else if (entry.entryId.indexOf('cursor-bottom') != -1) {
                        cursor = (_b = entry.content.value) !== null && _b !== void 0 ? _b : '';
                    }
                });
            }
        });
    }
    // Returning the data
    return {
        required: required,
        cursor: cursor,
        users: users,
        tweets: tweets
    };
}
exports.extractUserLikes = extractUserLikes;
//# sourceMappingURL=Users.js.map