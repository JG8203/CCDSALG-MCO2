"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.extractTweetRetweeters = exports.extractTweetLikers = exports.extractTweet = exports.extractTweets = void 0;
var Errors_1 = require("../../../enums/Errors");
// PARSERS
var Parsers = __importStar(require("../Parser"));
/**
 * @returns The raw tweets data formatted and sorted into required and additional data
 * @param res The raw response received from TwitterAPI
 */
function extractTweets(res) {
    var _a, _b, _c;
    var required = []; // To store the reqruied raw data
    var cursor = ''; // To store the cursor to next batch
    var users = []; // To store additional user data
    var tweets = []; // To store additional tweet data
    // If tweet does not exist
    if (Parsers.isJSONEmpty(res.data.search_by_raw_query)) {
        throw new Error(Errors_1.DataErrors.NoMatchingTweetsFound);
    }
    // If tweets
    if (res.data.search_by_raw_query.search_timeline.timeline.instructions.length) {
        // Destructuring raw list of tweets
        (_a = res.data.search_by_raw_query.search_timeline.timeline.instructions.filter(function (item) { return item.type === 'TimelineAddEntries'; })[0].entries) === null || _a === void 0 ? void 0 : _a.forEach(function (entry) {
            var _a, _b, _c;
            // If entry is of type tweet and tweet exists
            if (entry.entryId.includes('tweet') && ((_a = entry.content.itemContent) === null || _a === void 0 ? void 0 : _a.tweet_results.result.__typename) === 'Tweet') {
                required.push(entry.content.itemContent.tweet_results.result);
                users.push((_b = entry.content.itemContent.tweet_results.result.core) === null || _b === void 0 ? void 0 : _b.user_results.result);
                tweets.push(entry.content.itemContent.tweet_results.result);
            }
            // If entry is of type cursor and cursor exists
            else if (entry.entryId.includes('cursor-bottom')) {
                cursor = (_c = entry.content.value) !== null && _c !== void 0 ? _c : '';
            }
        });
        // If cursor not found in 'TimelineAddEntries', getting cursor from 'TimlineReplaceEntry'
        if (!cursor) {
            cursor = (_c = (_b = res.data.search_by_raw_query.search_timeline.timeline.instructions.filter(function (item) { var _a; return (_a = item.entry_id_to_replace) === null || _a === void 0 ? void 0 : _a.includes('cursor-bottom'); })[0].entry) === null || _b === void 0 ? void 0 : _b.content.value) !== null && _c !== void 0 ? _c : '';
        }
    }
    // Returning the data
    return {
        required: required,
        cursor: cursor,
        users: users,
        tweets: tweets
    };
}
exports.extractTweets = extractTweets;
/**
 * @returns The raw tweet data formatted and sorted into required and additional data
 * @param res The raw response received from TwitterAPI
 * @param tweetId The rest id of the tweet to fetch
 */
function extractTweet(res, tweetId) {
    var _a;
    var required = []; // To store the reqruied raw data
    var cursor = ''; // To store the cursor to next batch
    var users = []; // To store additional user data
    var tweets = []; // To store additional tweet data
    // If tweet does not exist
    if (Parsers.isJSONEmpty(res.data)) {
        throw new Error(Errors_1.DataErrors.TweetNotFound);
    }
    // Destructuring the received raw data
    (_a = res.data.threaded_conversation_with_injections_v2.instructions.filter(function (item) { return item['type'] === 'TimelineAddEntries'; })[0].entries) === null || _a === void 0 ? void 0 : _a.forEach(function (entry) {
        var _a, _b, _c;
        // If entry is of type tweet and tweet exists
        if (entry.entryId.indexOf('tweet') != -1 && ((_b = (_a = entry.content.itemContent) === null || _a === void 0 ? void 0 : _a.tweet_results) === null || _b === void 0 ? void 0 : _b.result.__typename) === 'Tweet') {
            // If this is the required tweet
            if (entry.entryId.indexOf(tweetId) != -1) {
                required.push(entry.content.itemContent.tweet_results.result);
            }
            tweets.push(entry.content.itemContent.tweet_results.result);
            users.push(entry.content.itemContent.tweet_results.result.core.user_results.result);
        }
        // If entry if of type conversation
        else if (entry.entryId.indexOf('conversationthread') != -1) {
            // Iterating over the conversation
            (_c = entry.content.items) === null || _c === void 0 ? void 0 : _c.forEach(function (item) {
                var _a;
                // If item is of type tweet and tweet exists
                if (item.entryId.indexOf('tweet') != -1 && ((_a = item.item.itemContent.tweet_results) === null || _a === void 0 ? void 0 : _a.result.__typename) === 'Tweet') {
                    required.push(item.item.itemContent.tweet_results.result);
                    tweets.push(item.item.itemContent.tweet_results.result);
                    users.push(item.item.itemContent.tweet_results.result.core.user_results.result);
                }
            });
        }
    });
    // Returning the data
    return {
        required: required,
        cursor: cursor,
        users: users,
        tweets: tweets
    };
}
exports.extractTweet = extractTweet;
/**
 * @returns The raw tweet likers data formatted and sorted into required and additional data
 * @param res The raw response received from TwitterAPI
 */
function extractTweetLikers(res) {
    var required = []; // To store the reqruied raw data
    var cursor = ''; // To store the cursor to next batch
    var users = []; // To store additional user data
    var tweets = []; // To store additional tweet data
    // If tweet does not exist
    if (Parsers.isJSONEmpty(res.data.favoriters_timeline)) {
        throw new Error(Errors_1.DataErrors.TweetNotFound);
    }
    // If likes found
    if (res.data.favoriters_timeline.timeline.instructions.length) {
        // Destructuring raw list of likers
        res.data.favoriters_timeline.timeline.instructions.filter(function (item) { return item.type === 'TimelineAddEntries'; })[0].entries.forEach(function (entry) {
            var _a, _b;
            // If entry is of type user and user exists
            if (entry.entryId.indexOf('user') != -1 && ((_a = entry.content.itemContent) === null || _a === void 0 ? void 0 : _a.user_results.result.__typename) === 'User') {
                required.push(entry.content.itemContent.user_results.result);
                users.push(entry.content.itemContent.user_results.result);
            }
            // If entry is of type cursor
            else if (entry.entryId.indexOf('cursor-bottom') != -1) {
                cursor = (_b = entry.content.value) !== null && _b !== void 0 ? _b : '';
            }
        });
    }
    // Returning the data
    return {
        required: required,
        cursor: cursor,
        users: users,
        tweets: tweets
    };
}
exports.extractTweetLikers = extractTweetLikers;
/**
 * @returns The raw tweet retweeters data formatted and sorted into required and additional data
 * @param res The raw response received from TwitterAPI
 */
function extractTweetRetweeters(res) {
    var required = []; // To store the reqruied raw data
    var cursor = ''; // To store the cursor to next batch
    var users = []; // To store additional user data
    var tweets = []; // To store additional tweet data
    // If tweet does not exist
    if (Parsers.isJSONEmpty(res.data.retweeters_timeline)) {
        throw new Error(Errors_1.DataErrors.TweetNotFound);
    }
    // If retweeters found
    if (res.data.retweeters_timeline.timeline.instructions.length) {
        // Destructuring raw list of retweeters
        res.data.retweeters_timeline.timeline.instructions.filter(function (item) { return item.type === 'TimelineAddEntries'; })[0].entries.forEach(function (entry) {
            var _a, _b;
            // If entry is of type user and user exists
            if (entry.entryId.indexOf('user') != -1 && ((_a = entry.content.itemContent) === null || _a === void 0 ? void 0 : _a.user_results.result.__typename) === 'User') {
                required.push(entry.content.itemContent.user_results.result);
                users.push(entry.content.itemContent.user_results.result);
            }
            // If entry is of type cursor
            else if (entry.entryId.indexOf('cursor-bottom') != -1) {
                cursor = (_b = entry.content.value) !== null && _b !== void 0 ? _b : '';
            }
        });
    }
    // Returning the data
    return {
        required: required,
        cursor: cursor,
        users: users,
        tweets: tweets
    };
}
exports.extractTweetRetweeters = extractTweetRetweeters;
//# sourceMappingURL=Tweets.js.map