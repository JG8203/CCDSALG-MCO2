/**
 * Handles reading and writing of data from and to cache.
 *
 * This services uses a local node-cache instance to cache data, since the data to be cached has no real purpose outside of the server session.
 * This serivce follows a singleton pattern, where at any point, only a single instance of this class exists.
 * This is done so that all the data is cached in a single instance, which makes sharing of cached data between different endpoints possible.
 * @internal
 */
export declare class CacheService {
    private static instance;
    private client;
    private constructor();
    /**
     * @returns The current working instance of CacheService
     */
    static getInstance(): CacheService;
    /**
     * Stores the input data in the cache.
     *
     * @param data The input data to store.
     *
     * @returns Whether writing to cache was successful or not.
     *
     * @remarks In order to cache data, the data to be cached must have a unique 'id' field.
     */
    write(data: any): void;
    /**
     * @param id The id id of the data to be fetched from cache.
     *
     * @returns The data with the given id.
     */
    read(id: string): any;
}
