import { AxiosResponse } from 'axios';
import { AuthService } from '../auth/AuthService';
/**
 * The different types of http requests.
 */
export declare enum HttpMethods {
    POST = "POST",
    GET = "GET"
}
/**
 * Handles all HTTP requests.
 * @internal
 *
 * This serves as the base service from which all other data services derive their behaviour.
 */
export declare class FetcherService {
    /** The authentication service instance. */
    protected auth: AuthService;
    /** The caching service instance. */
    private cache;
    /** Whether instance has been authenticated or not. */
    protected isAuthenticated: boolean;
    /**
     * @param auth The AuthService instance to use for authentication.
     */
    constructor(auth: AuthService);
    /**
    * The middleware for handling any HTTP error.
    *
    * @param res The response object received.
    *
    * @returns The received response, if no HTTP errors are found.
    *
    * @throws {@link HttpStatus} error, if any HTTP error is found.
    */
    private handleHTTPError;
    /**
     * Creates an HTTP request according to the given parameters.
     *
     * This method internally uses node-libcurl library to make curl requests to the URL, instead of node-fetch.
     * This has been done since that way it better mimics the HTTP requests made from browser.
     *
     * @param url The url to fetch data from.
     * @param authenticate Whether to authenticate requests or not.
     * @param method The HTTP method (from {@link HttpMethods}) to use.
     * @param data The data to be sent along with the request (for POST request).
     *
     * @returns The {@link AxiosResponse} received.
     */
    protected request<DataType>(url: string, authenticate?: boolean, method?: HttpMethods, data?: any): Promise<AxiosResponse<DataType>>;
    /**
     * Caches the extracted data into the {@link CacheService} instance.
     *
     * @param data The extracted data to be cached.
     */
    protected cacheData(data: any): void;
    /**
     * Fetches the data with the given id from the cache.
     *
     * @param id The id of the data to be read from cache.
     *
     * @returns The data with the given id. If does not exists, returns undefined.
     */
    protected readData(id: string): any;
}
