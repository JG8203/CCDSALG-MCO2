"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.CacheService = void 0;
// PACKAGES
var node_cache_1 = __importDefault(require("node-cache"));
// PARSERS
var Parsers = __importStar(require("../helper/Parser"));
/**
 * Handles reading and writing of data from and to cache.
 *
 * This services uses a local node-cache instance to cache data, since the data to be cached has no real purpose outside of the server session.
 * This serivce follows a singleton pattern, where at any point, only a single instance of this class exists.
 * This is done so that all the data is cached in a single instance, which makes sharing of cached data between different endpoints possible.
 * @internal
 */
var CacheService = /** @class */ (function () {
    // MEMBER METHODS
    function CacheService() {
        // Initializing new cache
        this.client = new node_cache_1["default"]();
    }
    /**
     * @returns The current working instance of CacheService
     */
    CacheService.getInstance = function () {
        // If an instance doesnt exists already
        if (!this.instance) {
            this.instance = new CacheService();
        }
        // Returning the current instance
        return this.instance;
    };
    /**
     * Stores the input data in the cache.
     *
     * @param data The input data to store.
     *
     * @returns Whether writing to cache was successful or not.
     *
     * @remarks In order to cache data, the data to be cached must have a unique 'id' field.
     */
    CacheService.prototype.write = function (data) {
        // Converting the data to a list of data
        data = Parsers.dataToList(data);
        // Iterating over the list of data
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var item = data_1[_i];
            // Storing whether data is already cached or not
            var cached = this.client.has(Parsers.findJSONKey(item, 'id'));
            // If data does not already exist in cache
            if (!cached) {
                // Adding data to cache
                this.client.set(Parsers.findJSONKey(item, 'id'), item);
            }
        }
    };
    /**
     * @param id The id id of the data to be fetched from cache.
     *
     * @returns The data with the given id.
     */
    CacheService.prototype.read = function (id) {
        // Getting data from cache
        var res = this.client.get(id);
        return res;
    };
    return CacheService;
}());
exports.CacheService = CacheService;
//# sourceMappingURL=CacheService.js.map