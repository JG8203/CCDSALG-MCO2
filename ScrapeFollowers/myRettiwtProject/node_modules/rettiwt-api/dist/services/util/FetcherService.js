"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.FetcherService = exports.HttpMethods = void 0;
// PACKAGES
var axios_1 = __importDefault(require("axios"));
var CacheService_1 = require("./CacheService");
// MODELS
var Tweet_1 = require("../../models/data/Tweet");
var User_1 = require("../../models/data/User");
// ENUMS
var HTTP_1 = require("../../enums/HTTP");
// HELPERS
var Headers = __importStar(require("../helper/Headers"));
/**
 * The different types of http requests.
 */
var HttpMethods;
(function (HttpMethods) {
    HttpMethods["POST"] = "POST";
    HttpMethods["GET"] = "GET";
})(HttpMethods = exports.HttpMethods || (exports.HttpMethods = {}));
;
/**
 * Handles all HTTP requests.
 * @internal
 *
 * This serves as the base service from which all other data services derive their behaviour.
 */
var FetcherService = /** @class */ (function () {
    // MEMBER METHODS
    /**
     * @param auth The AuthService instance to use for authentication.
     */
    function FetcherService(auth) {
        this.auth = auth;
        this.cache = CacheService_1.CacheService.getInstance();
        this.isAuthenticated = this.auth.isAuthenticated;
    }
    /**
    * The middleware for handling any HTTP error.
    *
    * @param res The response object received.
    *
    * @returns The received response, if no HTTP errors are found.
    *
    * @throws {@link HttpStatus} error, if any HTTP error is found.
    */
    FetcherService.prototype.handleHTTPError = function (res) {
        /**
         * If the status code is not 200 => the HTTP request was not successful. hence throwing error
         */
        if (res.status != 200 && res.status in HTTP_1.HttpStatus) {
            throw new Error(HTTP_1.HttpStatus[res.status]);
        }
        return res;
    };
    /**
     * Creates an HTTP request according to the given parameters.
     *
     * This method internally uses node-libcurl library to make curl requests to the URL, instead of node-fetch.
     * This has been done since that way it better mimics the HTTP requests made from browser.
     *
     * @param url The url to fetch data from.
     * @param authenticate Whether to authenticate requests or not.
     * @param method The HTTP method (from {@link HttpMethods}) to use.
     * @param data The data to be sent along with the request (for POST request).
     *
     * @returns The {@link AxiosResponse} received.
     */
    FetcherService.prototype.request = function (url, authenticate, method, data) {
        if (authenticate === void 0) { authenticate = true; }
        if (method === void 0) { method = HttpMethods.GET; }
        return __awaiter(this, void 0, void 0, function () {
            var config, _a, _b, _c, _d, _e;
            var _f;
            var _this = this;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _f = {};
                        if (!authenticate) return [3 /*break*/, 2];
                        _c = (_b = Headers).authorizedHeader;
                        return [4 /*yield*/, this.auth.getAuthCredentials()];
                    case 1:
                        _a = _c.apply(_b, [_g.sent()]);
                        return [3 /*break*/, 4];
                    case 2:
                        _e = (_d = Headers).guestHeader;
                        return [4 /*yield*/, this.auth.getGuestCredentials()];
                    case 3:
                        _a = _e.apply(_d, [_g.sent()]);
                        _g.label = 4;
                    case 4:
                        config = (
                        /**
                         * If authorization is required, using the authenticated header, using the authentication credentiials.
                         * Else, using the guest header, using the guest credentials.
                         */
                        _f.headers = _a,
                            _f);
                        if (!(method == HttpMethods.POST)) return [3 /*break*/, 6];
                        return [4 /*yield*/, axios_1["default"].post(url, data, config).then(function (res) { return _this.handleHTTPError(res); })];
                    case 5: return [2 /*return*/, _g.sent()];
                    case 6: return [4 /*yield*/, axios_1["default"].get(url, config).then(function (res) { return _this.handleHTTPError(res); })];
                    case 7: return [2 /*return*/, _g.sent()];
                }
            });
        });
    };
    /**
     * Caches the extracted data into the {@link CacheService} instance.
     *
     * @param data The extracted data to be cached.
     */
    FetcherService.prototype.cacheData = function (data) {
        /**
         * The extracted data is in raw form.
         * This raw data is deserialized into the respective known types.
         */
        var users = data.users.map(function (user) { return new User_1.User(user); });
        var tweets = data.tweets.map(function (tweet) { return new Tweet_1.Tweet(tweet); });
        // Caching the data
        this.cache.write(users);
        this.cache.write(tweets);
    };
    /**
     * Fetches the data with the given id from the cache.
     *
     * @param id The id of the data to be read from cache.
     *
     * @returns The data with the given id. If does not exists, returns undefined.
     */
    FetcherService.prototype.readData = function (id) {
        // Reading data from cache
        return this.cache.read(id);
    };
    return FetcherService;
}());
exports.FetcherService = FetcherService;
//# sourceMappingURL=FetcherService.js.map