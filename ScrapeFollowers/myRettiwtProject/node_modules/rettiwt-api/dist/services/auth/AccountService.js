"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.AccountService = void 0;
// PACKAGES
var node_libcurl_1 = require("node-libcurl");
// SERVICES
var AuthService_1 = require("./AuthService");
// ENUMS
var HTTP_1 = require("../../enums/HTTP");
var Errors_1 = require("../../enums/Errors");
// HELPERS
var LoginFlows_1 = __importDefault(require("../helper/payloads/LoginFlows"));
var Headers_1 = require("../helper/Headers");
var cookiejar_1 = require("cookiejar");
/**
 * Handles all operations related to a user's account, such as loggin in, managing account, etc
 * @public
 */
var AccountService = /** @class */ (function () {
    function AccountService() {
        /** The AuthService instance to use for authentication. */
        this.auth = new AuthService_1.AuthService();
        /** The current guest credentials to use. */
        this.guestCreds = { authToken: '', guestToken: '' };
        /** The email id of Twitter account to be logged into. */
        this.email = '';
        /** The user name of the Twitter account ot be logged into */
        this.userName = '';
        /** The password to the Twitter account to be logged into. */
        this.password = '';
        /** The cookies received from Twitter after logging in. */
        this.cookies = [];
        /** The flow token received after execution of current flow. */
        this.flowToken = '';
    }
    /**
     * @returns The current guest credentials to use. If if does not exists, then a new one is created
     */
    AccountService.prototype.getGuestCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.guestCreds.guestToken) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.auth.getGuestCredentials()];
                    case 1:
                        _a.guestCreds = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, this.guestCreds];
                }
            });
        });
    };
    /**
     * Step 1: Initiates login
     * @internal
     */
    AccountService.prototype.initiateLogin = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, _a, _b, _c, _d;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = node_libcurl_1.curly).post;
                        _c = [LoginFlows_1["default"].InitiateLogin.url];
                        _e = {};
                        _d = Headers_1.loginHeader;
                        return [4 /*yield*/, this.getGuestCredentials()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_e.httpHeader = _d.apply(void 0, [_f.sent(), this.cookies.toString()]),
                                _e.sslVerifyPeer = false,
                                _e.postFields = '',
                                _e)]))];
                    case 2:
                        res = _f.sent();
                        // Storing cookies received
                        this.cookies = new cookiejar_1.CookieJar().setCookies(res.headers[0]['Set-Cookie']);
                        // Getting the flow token
                        this.flowToken = res.data['flow_token'];
                        // Executing next subtask
                        return [4 /*yield*/, this.jsInstrumentationSubtask()];
                    case 3:
                        // Executing next subtask
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Step 2: Does something
     * @internal
     */
    AccountService.prototype.jsInstrumentationSubtask = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, _a, _b, _c, _d;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = node_libcurl_1.curly).post;
                        _c = [LoginFlows_1["default"].JsInstrumentationSubtask.url];
                        _e = {};
                        _d = Headers_1.loginHeader;
                        return [4 /*yield*/, this.getGuestCredentials()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_e.httpHeader = _d.apply(void 0, [_f.sent(), this.cookies.join(';').toString()]),
                                _e.sslVerifyPeer = false,
                                _e.postFields = JSON.stringify(LoginFlows_1["default"].JsInstrumentationSubtask.body(this.flowToken)),
                                _e)]))];
                    case 2:
                        res = _f.sent();
                        // Getting the flow token
                        this.flowToken = res.data['flow_token'];
                        // Executing next subtask
                        return [4 /*yield*/, this.enterUserIdentifier()];
                    case 3:
                        // Executing next subtask
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Step 3: Takes the email for login
     * @internal
     *
     * @throws {@link AuthenticationErrors.InvalidEmail}, if email does not exist.
     */
    AccountService.prototype.enterUserIdentifier = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, _a, _b, _c, _d, _i, _e, task;
            var _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = (_a = node_libcurl_1.curly).post;
                        _c = [LoginFlows_1["default"].EnterUserIdentifier.url];
                        _f = {};
                        _d = Headers_1.loginHeader;
                        return [4 /*yield*/, this.getGuestCredentials()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_f.httpHeader = _d.apply(void 0, [_g.sent(), this.cookies.join(';').toString()]),
                                _f.sslVerifyPeer = false,
                                _f.postFields = JSON.stringify(LoginFlows_1["default"].EnterUserIdentifier.body(this.flowToken, this.email)),
                                _f)]))];
                    case 2:
                        res = _g.sent();
                        // If no account found with given email
                        if (res.statusCode == HTTP_1.HttpStatus.BadRequest && res.data.errors[0].code == 399) {
                            throw new Error(Errors_1.AuthenticationErrors.InvalidEmail);
                        }
                        // Getting the flow token
                        this.flowToken = res.data['flow_token'];
                        _i = 0, _e = res.data.subtasks;
                        _g.label = 3;
                    case 3:
                        if (!(_i < _e.length)) return [3 /*break*/, 8];
                        task = _e[_i];
                        if (!(task['subtask_id'] == 'LoginEnterAlternateIdentifierSubtask')) return [3 /*break*/, 5];
                        // Executing next subtask
                        return [4 /*yield*/, this.enterAlternateUserIdentifier()];
                    case 4:
                        // Executing next subtask
                        _g.sent();
                        return [3 /*break*/, 8];
                    case 5:
                        if (!(task['subtask_id'] == 'LoginEnterPassword')) return [3 /*break*/, 7];
                        // Executing next subtask
                        return [4 /*yield*/, this.enterPassword()];
                    case 6:
                        // Executing next subtask
                        _g.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        _i++;
                        return [3 /*break*/, 3];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Step 4: Takes the username for login
     * @internal
     *
     * @throws {@link AuthenticationErrors.InvalidUsername}, if wrong username entered.
     */
    AccountService.prototype.enterAlternateUserIdentifier = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, _a, _b, _c, _d;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = node_libcurl_1.curly).post;
                        _c = [LoginFlows_1["default"].EnterAlternateUserIdentifier.url];
                        _e = {};
                        _d = Headers_1.loginHeader;
                        return [4 /*yield*/, this.getGuestCredentials()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_e.httpHeader = _d.apply(void 0, [_f.sent(), this.cookies.join(';').toString()]),
                                _e.sslVerifyPeer = false,
                                _e.postFields = JSON.stringify(LoginFlows_1["default"].EnterAlternateUserIdentifier.body(this.flowToken, this.userName)),
                                _e)]))];
                    case 2:
                        res = _f.sent();
                        // If invalid username for the given account
                        if (res.statusCode == HTTP_1.HttpStatus.BadRequest && res.data.errors[0].code == 399) {
                            throw new Error(Errors_1.AuthenticationErrors.InvalidUsername);
                        }
                        // Getting the flow token
                        this.flowToken = res.data['flow_token'];
                        // Executing next subtask
                        return [4 /*yield*/, this.enterPassword()];
                    case 3:
                        // Executing next subtask
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Step 5: Takes the password for login
     * @internal
     *
     * @throws {@link AuthenticationErrors.InvalidPassword}, incorrect password entered.
     */
    AccountService.prototype.enterPassword = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, _a, _b, _c, _d;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = node_libcurl_1.curly).post;
                        _c = [LoginFlows_1["default"].EnterPassword.url];
                        _e = {};
                        _d = Headers_1.loginHeader;
                        return [4 /*yield*/, this.getGuestCredentials()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_e.httpHeader = _d.apply(void 0, [_f.sent(), this.cookies.join(';').toString()]),
                                _e.sslVerifyPeer = false,
                                _e.postFields = JSON.stringify(LoginFlows_1["default"].EnterPassword.body(this.flowToken, this.password)),
                                _e)]))];
                    case 2:
                        res = _f.sent();
                        // If invalid password for the given account
                        if (res.statusCode == HTTP_1.HttpStatus.BadRequest && res.data.errors[0].code == 399) {
                            throw new Error(Errors_1.AuthenticationErrors.InvalidPassword);
                        }
                        // Getting the flow token
                        this.flowToken = res.data['flow_token'];
                        // Executing next subtask
                        return [4 /*yield*/, this.accountDuplicationCheck()];
                    case 3:
                        // Executing next subtask
                        _f.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Step 6: Gets the actual cookies
     * @internal
     */
    AccountService.prototype.accountDuplicationCheck = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res, _a, _b, _c, _d;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _b = (_a = node_libcurl_1.curly).post;
                        _c = [LoginFlows_1["default"].AccountDuplicationCheck.url];
                        _e = {};
                        _d = Headers_1.loginHeader;
                        return [4 /*yield*/, this.getGuestCredentials()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([(_e.httpHeader = _d.apply(void 0, [_f.sent(), this.cookies.join(';').toString()]),
                                _e.sslVerifyPeer = false,
                                _e.postFields = JSON.stringify(LoginFlows_1["default"].AccountDuplicationCheck.body(this.flowToken)),
                                _e)]))];
                    case 2:
                        res = _f.sent();
                        // Getting the cookies from the set-cookie header of the reponse.
                        this.cookies = new cookiejar_1.CookieJar().setCookies(res.headers[0]['Set-Cookie']);
                        // Getting the flow token
                        this.flowToken = res.data['flow_token'];
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Parse the authentication cookies recieved from Twitter into known format.
     *
     * @internal
     *
     * @param cookies The raw cookies received from Twitter.
     *
     * @returns The parsed cookies of type {@link AuthCookie}
     */
    AccountService.prototype.parseCookies = function (cookies) {
        /** The tempoorary parsed cookies. */
        var tempCookies = {};
        /**
         * Parsing the cookies into a standard JSON format.
         * The format is 'cookie_name': 'cookie_value'.
         * All other cookie parameters like expiry, etc are dropped.
         */
        cookies.forEach(function (cookie) {
            tempCookies[cookie.name] = cookie.value;
        });
        return {
            kdt: tempCookies['kdt'],
            twid: tempCookies['twid'],
            ct0: tempCookies['ct0'],
            auth_token: tempCookies['auth_token']
        };
    };
    /**
     * Login to Twitter using the given credentials and get back the cookies.
     *
     * @public
     *
     * @param email The email of the account to be logged into.
     * @param userName The username associated with the given account.
     * @param password The password to the account.
     *
     * @returns The cookies for authenticating with the given account.
     */
    AccountService.prototype.login = function (email, userName, password) {
        return __awaiter(this, void 0, void 0, function () {
            var parsedCookies;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Setting user credentials
                        this.email = email;
                        this.userName = userName;
                        this.password = password;
                        // Initiating login
                        /**
                         * This works by sending a chain of request that are required for login to twitter.
                         * Each method in the chain returns a flow token that must be provied as payload in the next method in the chain.
                         * Each such method is called a subtask.
                         * Each subtask sets the {@link flowToken} property of the class which is used in the payload of the next subtask.
                         * The final subtask returns the headers which actually contains the cookie in the 'set-cookie' field.
                         */
                        return [4 /*yield*/, this.initiateLogin()];
                    case 1:
                        // Initiating login
                        /**
                         * This works by sending a chain of request that are required for login to twitter.
                         * Each method in the chain returns a flow token that must be provied as payload in the next method in the chain.
                         * Each such method is called a subtask.
                         * Each subtask sets the {@link flowToken} property of the class which is used in the payload of the next subtask.
                         * The final subtask returns the headers which actually contains the cookie in the 'set-cookie' field.
                         */
                        _a.sent();
                        // Parsing the cookies
                        parsedCookies = this.parseCookies(this.cookies);
                        // Returning the final parsed cookies
                        return [2 /*return*/, parsedCookies];
                }
            });
        });
    };
    return AccountService;
}());
exports.AccountService = AccountService;
//# sourceMappingURL=AccountService.js.map